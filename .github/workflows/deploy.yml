name: Deploy WMSTunning

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: wmstunning-deploy
  cancel-in-progress: true

jobs:
  build_deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write      # OIDC
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Detecta si el proyecto de runtime está en "server" o en la raíz "."
      - name: Detect package dir
        id: detect
        shell: bash
        run: |
          if [ -f server/package.json ]; then
            echo "pkgdir=server" >> $GITHUB_OUTPUT
            echo "[detect] Usando 'server' como paquete de runtime"
          elif [ -f package.json ]; then
            echo "pkgdir=." >> $GITHUB_OUTPUT
            echo "[detect] Usando la raíz (.) como paquete de runtime"
          else
            echo "ERROR: No se encontró package.json ni en server/ ni en la raíz" >&2
            exit 1
          fi

      # --- FRONTEND (opcional): si existe /client, construye y copia a public ---
      - name: Build client (if exists)
        shell: bash
        run: |
          if [ -d client ]; then
            echo "[client] Building client..."
            pushd client
            npm ci
            npm run build --if-present
            popd

            RUNTIME_DIR="${{ steps.detect.outputs.pkgdir }}"
            mkdir -p "${RUNTIME_DIR}/public"
            if [ -d client/dist ];  then cp -r client/dist/*  "${RUNTIME_DIR}/public/"; fi
            if [ -d client/build ]; then cp -r client/build/* "${RUNTIME_DIR}/public/"; fi
          else
            echo "[client] No existe carpeta client/, se omite"
          fi

      # --- BACKEND / RUNTIME ---
      #  Si pkgdir=server: hace lo que te funcionaba antes (build en server/ y prune)
      #  Si pkgdir=.     : hace build en la raíz y prepara .release para runtime
      - name: Build runtime
        shell: bash
        run: |
          set -e
          PKGDIR="${{ steps.detect.outputs.pkgdir }}"

          if [ "$PKGDIR" = "server" ]; then
            echo "[runtime] Modo server/"
            pushd server
            npm ci
            npm run build --if-present
            npm prune --omit=dev
            test -f dist/index.js || (echo "ERROR: server/dist/index.js no existe" >&2; ls -R dist; exit 1)
            popd

            # Empaquetar SOLO server (runtime completo)
            echo "[zip] Empaquetando server/"
            cd server
            zip -r $GITHUB_WORKSPACE/app.zip .

          else
            echo "[runtime] Modo raíz (.)"
            npm ci
            npm run build              # debe generar dist/index.js (vite + esbuild)
            npm prune --omit=dev

            # Preparar carpeta de release con SOLO runtime
            rm -rf .release && mkdir -p .release
            cp package.json package-lock.json .release/ || true
            cp -r dist .release/dist
            cp -r node_modules .release/node_modules

            # Huella de versión (opcional)
            echo "${{ github.sha }}" > .release/dist/version.txt || true

            # Sanity check + zip
            pushd .release
            test -f dist/index.js || (echo "ERROR: dist/index.js no existe" >&2; ls -R dist; exit 1)
            zip -r $GITHUB_WORKSPACE/app.zip .
            popd
          fi

      # Login a Azure con OIDC (mismos secrets que ya usabas cuando funcionó)
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_3252DFCC291441C99EF9162DB3AF6167 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_39FC475C67D043EF8C1F99A1DEEEF93D }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_4B12F5CA7B904BFCBCD1D75BE3697847 }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'WMSTunning'
          package: app.zip

